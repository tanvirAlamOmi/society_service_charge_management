// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum FlatType {
  TWO_BHK
  THREE_BHK
  FOUR_BHK
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
  REJECTED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum PromoType {
  EXPIRY_DATE
  USER_BASED
  LOCATION_BASED
  AMOUNT_BASED
  FLAT_BASED
}

enum PromoStatus {
  ACTIVE
  EXPIRED
  INACTIVE
}

model Society {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  postal_code String?
  city        String?
  state       String?
  location_lat  Float?   
  location_lng  Float?
  country     String?
  total_flats Int
  created_at  DateTime @default(now())
  updated_at    DateTime @updatedAt  @default(now())

  users           User[]
  flats           Flat[]
  service_charges ServiceCharge[]
  invitations     Invitation[]
  registration_payments RegistrationPayment[]
  payments  Payment[]  
} 

model User {
  id                 Int        @id @default(autoincrement())
  username           String?    @unique
  fullname           String
  alias              String?
  email              String     @unique
  phone              String?    @unique
  password           String?
  role_id            Int
  society_id         Int
  flat_id            Int?
  service_type       String?
  pay_service_charge Boolean    @default(true)
  created_at         DateTime   @default(now())
  updated_at    DateTime       @updatedAt  @default(now())
  status             UserStatus @default(PENDING)

  role                 Role                @relation(fields: [role_id], references: [id])
  society              Society             @relation(fields: [society_id], references: [id])
  flat                 Flat?               @relation(fields: [flat_id], references: [id])
  owned_flats          Flat[]              @relation("FlatOwner")
  payments             Payment[] 
  rented_flats         FlatResident[]      @relation("Resident")
  invitationsSent      Invitation[]        @relation("Inviter")
  invitationsReceived  Invitation[]        @relation("Invitee")
  registration_payments RegistrationPayment[]
  promos        Promo[]
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  users       User[]
}


model Flat {
  id          Int      @id @default(autoincrement())
  number      String
  society_id  Int
  owner_id    Int
  resident_id Int?
  flat_type   FlatType
  created_at  DateTime @default(now())
  updated_at    DateTime  @updatedAt  @default(now())
  
  society   Society        @relation(fields: [society_id], references: [id])
  owner     User           @relation("FlatOwner", fields: [owner_id], references: [id])
  residents FlatResident[]
  user      User[]
  user_service_charges UserServiceCharge[]
  payments      Payment[]
}

model PredefinedServiceCharge {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())

  service_charges      ServiceCharge[]
  user_service_charges UserServiceCharge[]
}

model ServiceCharge {
  id                           Int      @id @default(autoincrement())
  society_id                   Int
  predefined_service_charge_id Int
  flat_type                    FlatType
  amount                       Decimal  @db.Decimal(10, 2)
  created_at                   DateTime @default(now()) 
  updated_at    DateTime    @updatedAt  @default(now())

  society                   Society                 @relation(fields: [society_id], references: [id])
  predefined_service_charge PredefinedServiceCharge @relation(fields: [predefined_service_charge_id], references: [id])
}

model UserServiceCharge {
  id                           Int      @id @default(autoincrement())
  flat_id                      Int
  predefined_service_charge_id Int
  amount                       Decimal  @db.Decimal(10, 2)
  created_at                   DateTime @default(now())
  updated_at    DateTime    @updatedAt  @default(now())

  flat                      Flat                    @relation(fields: [flat_id], references: [id])
  predefined_service_charge PredefinedServiceCharge @relation(fields: [predefined_service_charge_id], references: [id])
}

model Payment {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  flat_id             Int 
  society_id          Int  
  amount              Decimal? @db.Decimal(10, 2)
  status             PaymentStatus @default(PENDING) 
  payment_month       DateTime @db.Date
  payment_date        DateTime @default(now())
  tran_id             String?  @unique
  transaction_details Json?
  currency            String   @default("BDT")
  payment_method      String?   @default("CASH")

  user           User          @relation(fields: [user_id], references: [id])
  flat          Flat?         @relation(fields: [flat_id], references: [id])
  society        Society       @relation(fields: [society_id], references: [id])  
}

model FlatResident {
  id          Int       @id @default(autoincrement())
  flat_id     Int
  resident_id Int
  start_date  DateTime  @db.Date
  end_date    DateTime? @db.Date
  created_at  DateTime  @default(now())
  updated_at    DateTime    @updatedAt  @default(now())

  flat     Flat @relation(fields: [flat_id], references: [id])
  resident User @relation("Resident", fields: [resident_id], references: [id])
}
  
model Invitation {
  id         Int              @id @default(autoincrement())
  email      String
  token      String           @unique
  status     InvitationStatus @default(PENDING)
  society_id Int
  inviter_id Int?
  user_id    Int?
  createdAt  DateTime         @default(now())
  updated_at    DateTime    @updatedAt  @default(now())
  expiresAt  DateTime
  acceptedAt DateTime?

  society Society @relation(fields: [society_id], references: [id])
  user    User?   @relation(fields: [user_id], references: [id], name: "Invitee")
  inviter User?   @relation(fields: [inviter_id], references: [id], name: "Inviter") 
}

model RegistrationPayment {
  id            Int           @id @default(autoincrement())
  session_id    String?        @unique // SSLCOMMERZ session ID
  tran_id       String?       // SSLCOMMERZ transaction ID
  email         String         
  amount        Float
  currency      String        @default("BDT")
  status        PaymentStatus @default(PENDING)
  society_id    Int?           
  user_id       Int?          
  promo_id      Int?           
  transaction_details Json?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt  @default(now())

  society       Society?      @relation(fields: [society_id], references: [id])
  user          User?         @relation(fields: [user_id], references: [id])
  promo         Promo?        @relation(fields: [promo_id], references: [id])
}

model Promo {
  id            Int         @id @default(autoincrement())
  code          String      @unique
  type          PromoType
  discount      Float       // Percentage or fixed amount
  max_discount  Float?      // Optional cap
  min_amount    Float?      // For amount-based promos
  expiry_date   DateTime?   // For expiry-based promos
  location_lat  Float?      // For location-based promos
  location_lng  Float?      // For location-based promos
  location_radius Float?    // Radius in km
  location_area String?     // For location-based promos
  flat_type     FlatType?   // For flat-based promos
  user_id       Int?        // For user-based promos
  status        PromoStatus @default(ACTIVE)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt  @default(now())

  user          User?       @relation(fields: [user_id], references: [id])
  registration_payments RegistrationPayment[]
}